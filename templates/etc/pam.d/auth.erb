#%PAM-1.0
# This file managed by Puppet
# User changes will be lost!
<%
# Build the auth section:
# Remember: ORDER MATTERS!

_auth = [
  "auth     optional      pam_faildelay.so",
  "auth     required      pam_env.so"
]

_auth << "auth     required      pam_faillock.so preauth" +
        " #{!@display_account_lock ? 'silent' : ''}" +
        " deny=#{@deny} even_deny_root audit unlock_time=#{@unlock_time} root_unlock_time=#{@root_unlock_time}" +
        " fail_interval=#{@fail_interval}"

if @name == 'fingerprint'
  _auth << 'auth     sufficient    pam_fprintd.so'
end

if @name == 'smartcard'
  _auth << 'auth     [success=done ignore=ignore default=die] pam_pkcs11.so wait_for_card card_only'
end

if ['system','password'].include?(@name)
  # SSSD is mutually exclusive with pam_ldap!
  if @use_sssd
    _auth << 'auth     sufficient    pam_sss.so forward_pass'
    _auth << 'auth     sufficient    pam_unix.so try_first_pass'
  elsif @use_ldap
    _auth << 'auth     sufficient    pam_unix.so try_first_pass'
    _auth << 'auth     sufficient    pam_ldap.so use_first_pass ignore_unknown_user ignore_authinfo_unavail'
  else
    _auth << 'auth     sufficient    pam_unix.so try_first_pass'
  end
end

if @name == 'password'
  _auth << "auth     [default=die] pam_faillock.so authfail deny=#{@deny} even_deny_root audit unlock_time=#{@unlock_time} root_unlock_time=#{@root_unlock_time}"
end

_auth << "auth     requisite     pam_succeed_if.so uid >= #{@uid} quiet"
_auth << 'auth     required      pam_deny.so'

# Build the account section:

_account = []

if @use_netgroups
    _account << 'account     required      pam_access.so accessfile=/etc/security/access.conf'
end

if @use_ldap && !@use_sssd
  _account << 'account     [success=1]   pam_unix.so broken_shadow'
  _account << 'account     optional      pam_ldap.so ignore_unknown_user ignore_authinfo_unavail'
else
  _account << 'account     required      pam_unix.so broken_shadow'
end

_account << 'account     required      pam_faillock.so'

if @use_sssd
  if @use_openshift
    _account << 'account     [success=4 default=ignore] pam_succeed_if.so quiet shell = /usr/bin/oo-trap-user'
  end
  _account << 'account     [success=3 default=ignore] pam_succeed_if.so service = crond quiet'
  _account << "account     sufficient    pam_succeed_if.so uid < #{@uid} quiet"
  _account << 'account     requisite     pam_access.so nodefgroup'
  _account << 'account     [success=1 default=ignore] pam_localuser.so'
  _account << 'account     [default=bad success=ok system_err=ignore user_unknown=ignore] pam_sss.so'
else
  if @use_openshift
    _account << 'account     [success=3 default=ignore] pam_succeed_if.so quiet shell = /usr/bin/oo-trap-user'
  end
  _account << 'account     [success=2 default=ignore] pam_succeed_if.so service = crond quiet'
  _account << "account     sufficient    pam_succeed_if.so uid < #{@uid} quiet"
  _account << 'account     requisite     pam_access.so nodefgroup'
end
_account << 'account     required      pam_permit.so'

# Build the password section:

_password = []

if ['system','password'].include?(@name)
  _cracklib = "password     requisite     pam_cracklib.so try_first_pass difok=#{@cracklib_difok}" +
              " retry=#{@cracklib_retry} minlen=#{@cracklib_minlen} minclass=#{@cracklib_minclass}" +
              " maxrepeat=#{@cracklib_maxrepeat} maxclassrepeat=#{@cracklib_maxclassrepeat}" +
              " maxsequence=#{@cracklib_maxsequence} dcredit=#{@cracklib_dcredit} ucredit=#{@cracklib_ucredit}" +
              " lcredit=#{@cracklib_lcredit} ocredit=#{@cracklib_ocredit}"

  if @cracklib_gecoscheck
    _cracklib += " gecoscheck"
  end

  if @cracklib_reject_username
    _cracklib += " reject_username"
  end

  if @cracklib_enforce_for_root
    _cracklib += " enforce_for_root"
  end

  _password << _cracklib
  _pam_unix = "password     sufficient    pam_unix.so sha512 rounds=#{@rounds}" +
                " shadow try_first_pass use_authtok remember=#{@remember}"

  if @use_sssd
    _password << 'password     sufficient    pam_sss.so use_authtok'
    _password << _pam_unix
  elsif @use_ldap
    _password << _pam_unix
    _password << 'password     sufficient    pam_ldap.so use_authtok ignore_unknown_user ignore_authinfo_unavail'
  else
    _password << _pam_unix
  end
end

if @name == 'smartcard'
  _password << 'password     required      pam_pkcs11.so'
else
  _password << 'password     required      pam_deny.so'
end

# Build the session section:

_session = [
  'session      optional      pam_keyinit.so revoke',
  'session      required      pam_limits.so',
  '-session     optional      pam_systemd.so',
  'session      sufficient    pam_succeed_if.so service = gdm-launch-environment quiet',
  'session      sufficient    pam_succeed_if.so service in crond quiet use_uid'
]

if ['system','password','fingerprint'].include?(@name) and !@tty_audit_enable.empty?
  _session << "session      required      pam_tty_audit.so disable=* enable=#{@tty_audit_enable.join(',')}"
end

_session <<  'session      sufficient    pam_succeed_if.so user = root quiet'

if @use_openshift
  _session << 'session      [default=1 success=ignore] pam_succeed_if.so quiet shell = /usr/bin/oo-trap-user'
  _session << 'session      required      pam_namespace.so no_unmount_on_close'
  _session << 'session      [default=ignore success=1] pam_succeed_if.so quiet shell = /usr/bin/oo-trap-user'
end

_session << 'session      requisite     pam_access.so nodefgroup'

if @use_sssd
  _session << 'session      optional      pam_sss.so'
elsif @use_ldap
  _session << 'session      [success=1]   pam_unix.so'
  _session << 'session      optional      pam_ldap.so ignore_unknown_user ignore_authinfo_unavail'
else
  _session << 'session      required      pam_unix.so'
end

_session << 'session      optional      pam_oddjob_mkhomedir.so silent'
_session << 'session      required      pam_lastlog.so showfailed'
-%>
<%= _auth.join("\n") %>

<%= _account.join("\n") %>

<%= _password.join("\n") %>

<%= _session.join("\n") %>
