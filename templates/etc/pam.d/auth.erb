#%PAM-1.0
# This file managed by Puppet
# User changes will be lost!
<%
# Build the auth section:
# Remember: ORDER MATTERS!

_even_deny_root = @even_deny_root ? " even_deny_root root_unlock_time=#{@root_unlock_time}" : ''

_auth = [
  "auth     optional      pam_faildelay.so",
  "auth     required      pam_env.so"
]

_auth << "auth     required      pam_faillock.so preauth" +
        "#{!@display_account_lock ? ' silent' : ''}" +
        " deny=#{@deny} audit unlock_time=#{@unlock_time}" +
        " fail_interval=#{@fail_interval}" +
        _even_deny_root

if @name == 'fingerprint'
  _auth << 'auth     sufficient    pam_fprintd.so'
end

if @name == 'smartcard'
  _auth << 'auth     [success=done ignore=ignore default=die] pam_pkcs11.so wait_for_card card_only'
end

if ['system'].include?(@name)
  if @oath
    _auth << 'auth     [success=3 default=ignore] pam_listfile.so item=group sense=allow file=/etc/liboath/exclude_groups.oath'
    _auth << 'auth     [success=2 default=ignore] pam_listfile.so item=user sense=allow file=/etc/liboath/exclude_users.oath'
    _auth << "auth     [success=1 default=bad]    pam_oath.so usersfile=/etc/liboath/users.oath window=#{@oath_window}"
    _auth << 'auth     requisite     pam_deny.so'
  end
end

if ['system','password'].include?(@name)
  if @sssd
    _auth << 'auth     sufficient    pam_sss.so forward_pass'
    _auth << 'auth     sufficient    pam_unix.so try_first_pass'
  else
    _auth << 'auth     sufficient    pam_unix.so try_first_pass'
  end
    _auth << "auth     [default=die] pam_faillock.so authfail deny=#{@deny} audit unlock_time=#{@unlock_time}" + _even_deny_root
end

_auth << "auth     requisite     pam_succeed_if.so uid >= #{@uid} quiet"
_auth << 'auth     required      pam_deny.so'

# Build the account section:

_account = []

if @use_netgroups
  if @enable_separator
    _account << "account     required      pam_access.so listsep=#{@separator} accessfile=/etc/security/access.conf"
  else
    _account << "account     required      pam_access.so accessfile=/etc/security/access.conf"
  end
end

_account << 'account     required      pam_unix.so broken_shadow'
_account << 'account     required      pam_faillock.so'

if @sssd
  if @use_openshift
    _account << 'account     [success=4 default=ignore] pam_succeed_if.so quiet shell = /usr/bin/oo-trap-user'
  end
  _account << 'account     [success=3 default=ignore] pam_succeed_if.so service = crond quiet'
  _account << "account     sufficient    pam_succeed_if.so uid < #{@uid} quiet"
  if @enable_separator
    _account << "account     requisite     pam_access.so listsep=#{@separator} nodefgroup"
  else
    _account << "account     requisite     pam_access.so nodefgroup"
  end
  _account << 'account     [success=1 default=ignore] pam_localuser.so'
  _account << 'account     [default=bad success=ok system_err=ignore user_unknown=ignore] pam_sss.so'
else
  if @use_openshift
    _account << 'account     [success=3 default=ignore] pam_succeed_if.so quiet shell = /usr/bin/oo-trap-user'
  end
  _account << 'account     [success=2 default=ignore] pam_succeed_if.so service = crond quiet'
  _account << "account     sufficient    pam_succeed_if.so uid < #{@uid} quiet"
  if @enable_separator
    _account << "account     requisite     pam_access.so listsep=#{@separator} nodefgroup"
  else
    _account << "account     requisite     pam_access.so nodefgroup"
  end
end
_account << 'account     required      pam_permit.so'

# Build the password section:

_password = []

if ['system','password'].include?(@name)
  _password_check = "password     requisite     pam_#{@password_check_backend}.so retry=#{@cracklib_retry}"

  if @cracklib_enforce_for_root
    _password_check += " enforce_for_root"
  end

  if @cracklib_reject_username
    _password_check += " reject_username"
  end

  if @password_check_backend == 'cracklib'
    if @cracklib_minlen
      _password_check += " minlen=#{@cracklib_minlen}"
    end

    if @cracklib_minclass
      _password_check += " minclass=#{@cracklib_minclass}"
    end

    if @cracklib_maxrepeat
      _password_check += " maxrepeat=#{@cracklib_maxrepeat}"
    end

    if @cracklib_difok
      _password_check += " difok=#{@cracklib_difok}"
    end

    if @cracklib_maxsequence
      _password_check += " maxsequence=#{@cracklib_maxsequence}"
    end

    if @cracklib_maxclassrepeat
      _password_check += " maxclassrepeat=#{@cracklib_maxclassrepeat}"
    end

    if @cracklib_dcredit
      _password_check += " dcredit=#{@cracklib_dcredit}"
    end

    if @cracklib_ucredit
      _password_check += " ucredit=#{@cracklib_ucredit}"
    end

    if @cracklib_lcredit
      _password_check += " lcredit=#{@cracklib_lcredit}"
    end

    if @cracklib_ocredit
      _password_check += " ocredit=#{@cracklib_ocredit}"
    end

    unless @cracklib_gecoscheck.nil?
      if @cracklib_gecoscheck
        _password_check += ' gecoscheck'
      end
    end
  end

  _password << _password_check

  _pam_pwhistory  = "password     required      pam_pwhistory.so use_authtok remember=#{@remember} retry=#{@remember_retry}"

  if @remember_for_root
    _pam_pwhistory << ' enforce_for_root'
  end

  _pam_unix = 'password     sufficient    pam_unix.so' +
                " #{@hash_algorithm} rounds=#{@rounds}" +
                ' shadow try_first_pass use_authtok'

  if @sssd
    _password << _pam_pwhistory
    _password << 'password     sufficient    pam_sss.so use_authtok'
    _password << _pam_unix
  else
    _password << _pam_pwhistory
    _password << _pam_unix
  end
end

if @name == 'smartcard'
  _password << 'password     required      pam_pkcs11.so'
else
  _password << 'password     required      pam_deny.so'
end

# Build the session section:

_session = [
  'session      optional      pam_keyinit.so revoke',
  'session      required      pam_limits.so',
  '-session     optional      pam_systemd.so',
  'session      sufficient    pam_succeed_if.so service = gdm-launch-environment quiet',
  'session      sufficient    pam_succeed_if.so service in crond quiet use_uid'
]

if ['system','password','fingerprint'].include?(@name) && !@tty_audit_users.empty?
  _session << "session      required      pam_tty_audit.so disable=* enable=#{@tty_audit_users.join(',')}"
end

if @locale_file
  _session << "session      optional      pam_env.so readenv=1 envfile=#{@locale_file}"
end

_session <<  'session      sufficient    pam_succeed_if.so user = root quiet'

if @use_openshift
  _session << 'session      [default=1 success=ignore] pam_succeed_if.so quiet shell = /usr/bin/oo-trap-user'
  _session << 'session      required      pam_namespace.so no_unmount_on_close'
  _session << 'session      [default=ignore success=1] pam_succeed_if.so quiet shell = /usr/bin/oo-trap-user'
end
if @enable_separator
  _session << "session      requisite     pam_access.so listsep=#{@separator} nodefgroup"
else
  _session << "session      requisite     pam_access.so nodefgroup"
end
if @sssd
  _session << 'session      optional      pam_sss.so'
else
  _session << 'session      required      pam_unix.so'
end

_session << 'session      optional      pam_oddjob_mkhomedir.so silent'
_session << 'session      required      pam_lastlog.so showfailed'
-%>
<%= _auth.join("\n") %>

<%= _account.join("\n") %>

<%= _password.join("\n") %>

<%= _session.join("\n") %>
